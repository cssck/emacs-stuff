;;; agitate-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from agitate.el

(autoload 'agitate-diff-refine-cycle "agitate" "\
Cycle current, all, or no refined (word-wise) diff highlighting.

Upon first invocation, refine the diff hunk at point or, when
none exists, the one closest to it.  On second call, operate on
the entire buffer.  And on the third time, remove all word-wise
fontification." '(diff-mode))
(autoload 'agitate-diff-buffer-or-file "agitate" "\
Produce a diff against the file or latest revision.

If the buffer is modified, produce a diff that compares its state
to that of the corresponding file.  In simple terms, show the
latest unsaved changes.

If the buffer is not modified, produce a diff of the file
relative to its latest revision." t)
(autoload 'agitate-diff-narrow-dwim "agitate" "\
Narrow to diff hunk or file and widen when already narrowed.
By default narrow to the focused diff hunk.  With optional
NARROW-FILE as a prefix argument, operate on the current file
instead.

(fn &optional NARROW-FILE)" t)
(autoload 'agitate-diff-enable-outline-minor-mode "agitate" "\
Enable `outline-minor-mode' with appropriate tweaks for diffs.

This basically gives you folding of diff hunks by means of the
`outline-cycle' command.

Add this function to the `diff-mode-hook'.")
(autoload 'agitate-log-edit-insert-file-name "agitate" "\
Insert at point file name sans directory from `log-edit-files'.

If multiple files are involved, prompt with completion for one
among them.

With optional prefix argument WITH-FILE-EXTENSION, include the
file extension.  Else omit it.

(fn &optional WITH-FILE-EXTENSION)" '(log-edit-mode))
(autoload 'agitate-log-edit-emoji-commit "agitate" "\
Insert emoji commit message at point.
Prompt for entry among `agitate-log-edit-emoji-collection'." t)
(function-put 'agitate-log-edit-emoji-commit 'interactive-only 't)
(defvar agitate-log-edit-informative-mode nil "\
Non-nil if Agitate-Log-Edit-Informative mode is enabled.
See the `agitate-log-edit-informative-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `agitate-log-edit-informative-mode'.")
(custom-autoload 'agitate-log-edit-informative-mode "agitate" nil)
(autoload 'agitate-log-edit-informative-mode "agitate" "\
Apply a specific window configuation when entering `log-edit'.

Show the `log-edit' window on the left, with the corresponding
diff on the right.

If `agitate-log-edit-informative-show-root-log' is non-nil, run
`vc-print-root-log' subject to `agitate-log-limit'.  Display it
below the `log-edit' window.

If `agitate-log-edit-informative-show-files' is non-nil, show the
`log-edit-files' further below.

Restore the last window configuration when finalising `log-edit',
either with `log-edit-kill-buffer' or `log-edit-done'.

Always kill the buffer used to perform the editing.  Ignore the
user option `log-edit-keep-buffer'.

This is a global minor mode.  If called interactively, toggle the
`Agitate-Log-Edit-Informative mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='agitate-log-edit-informative-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'agitate-log-view-kill-revision "agitate" "\
Append to `kill-ring' log-view revision at or around point.

When the log-view is in the short format (one compact line per
revision), the revision is the one on the current line.  If the
revision is expanded with `log-view-expanded-log-entry-function'
and point is somewhere inside the expanded text, the revision is
still the same.

When the log-view is in the long format (detailed view where each
revision spans several lines), the revision is the one pertinent
to the text at point." t)
(autoload 'agitate-log-view-kill-revision-expanded "agitate" "\
Append to `kill-ring' expanded message of log-view revision at point." '(log-view-mode))
(autoload 'agitate-vc-git-find-revision "agitate" "\
Find revision of current file, visiting it in a buffer.
Prompt with completion for the revision.

The number of revisions in the log is controlled by the user
option `agitate-log-limit'.

Pro tip: if you are using the `embark' package, you can produce a
snapshot of the minibuffer prompt.  Then use the resulting buffer
to browse through the file's history." t)
(function-put 'agitate-vc-git-find-revision 'interactive-only 't)
(autoload 'agitate-vc-git-show "agitate" "\
Prompt for commit and run `git-show(1)' on it.
With optional CURRENT-FILE as prefix argument, limit the commits
to those pertaining to the current file.

The number of revisions in the log is controlled by the user
option `agitate-log-limit'.

Pro tip: if you are using the `embark' package, you can produce a
snapshot of the minibuffer prompt.  Then use the resulting buffer
to browse through the available commits.

(fn &optional CURRENT-FILE)" t)
(function-put 'agitate-vc-git-show 'interactive-only 't)
(autoload 'agitate-vc-git-show-tag "agitate" "\
Run `git-show(1)' on Git TAG.
When called interactively, prompt for TAG using minibuffer
completion.

Pro tip: if you are using the `embark' package, you can produce a
snapshot of the minibuffer prompt.  Then use the resulting buffer
to browse through the available tags.

(fn TAG)" t)
(autoload 'agitate-vc-git-format-patch-single "agitate" "\
Format patch for a single COMMIT.

If in a log-view buffer, the COMMIT is the one at point.  For the
details of how that is determined, read the doc string of
`agitate-log-view-kill-revision'.

If there is no such commit at point, prompt for COMMIT using
minibuffer completion.

Output the patch file to the return value of the function
`vc-root-dir'.

The number of revisions in the log is controlled by the user
option `agitate-log-limit'.

For Emacs 29, consider using `vc-prepare-patch'.

(fn COMMIT)" t)
(autoload 'agitate-vc-git-format-patch-n-from-head "agitate" "\
Format patches covering NUMBER of commits from current HEAD.
This is the eqvuivalent of: git format-patch -NUMBER.

For Emacs 29, consider using `vc-prepare-patch'.

(fn NUMBER)" t)
(autoload 'agitate-vc-git-grep "agitate" "\
Run `git-grep(1)' for REGEXP in `vc-root-dir'.
This is a simple wrapper around `vc-git-grep' to streamline the
basic task of searching for a regexp in the current Git
repository.  Use the original `vc-git-grep' for its other
arguments.

(fn REGEXP)" t)
(autoload 'agitate-vc-git-kill-commit-hash "agitate" "\
Append to `kill-ring' hash of commit.
Prompt for commit using minibuffer completion.  The number of
revisions in the log is controlled by the user option
`agitate-log-limit'.

To kill the message of the commit, use the command
`agitate-vc-git-kill-commit-message'." t)
(function-put 'agitate-vc-git-kill-commit-hash 'interactive-only 't)
(autoload 'agitate-vc-git-kill-commit-message "agitate" "\
Append to `kill-ring' message of commit with HASH identifier.
When called interactively, prompt for HASH using minibuffer
completion.

When point is in a log-view buffer, make the revision at point
the default value of the prompt (though also see the command
`agitate-log-view-kill-revision-expanded').

The number of revisions in the log is controlled by the user
option `agitate-log-limit'.

To kill only the commit hash, use the command
`agitate-vc-git-kill-commit-hash'.

(fn HASH)" t)
(autoload 'agitate-vc-git-push-prompt-for-remote "agitate" "\
Behave like `vc-git-push' but prompt for a remote, if needed.
The meaning of PROMPT is the same as that of `vc-git-push'.  In
such a case, do not prompt for a remote.

To use this function add it as an override advice to
`vc-git-push'.

(fn PROMPT)")
(register-definition-prefixes "agitate" '("agitate-"))

;;; End of scraped data

(provide 'agitate-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; agitate-autoloads.el ends here
